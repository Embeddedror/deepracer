import math


sight = 0.5
reward_max = 5.0
reward_min = 0.001
fast_progress = 80

######################################################################

def reward_function(params):
    reward = 0.0

    x = params["x"]
    y = params["y"]

    racing_track = get_racing_track()

    target_idx, min_idx = draw_ray(params, racing_track, sight)

    reward += score_steering(params, racing_track[target_idx])

    reward += score_speed(params, racing_track[min_idx])

    reward += score_center(params, racing_track[min_idx])
    
    reward += score_progress(params)

    return float(reward)

######################################################################

def get_distance(coor1, coor2):
    return math.sqrt(
        (coor1[0] - coor2[0]) * (coor1[0] - coor2[0])
        + (coor1[1] - coor2[1]) * (coor1[1] - coor2[1])
    )

def get_radians(coor1, coor2):
    return math.atan2((coor2[1] - coor1[1]), (coor2[0] - coor1[0]))


def get_degrees(coor1, coor2):
    return math.degrees(get_radians(coor1, coor2))
    
######################################################################

def get_difference_radians(angle1, angle2):
    diff = (angle1 - angle2) % (2.0 * math.pi)

    if diff >= math.pi:
        diff -= 2.0 * math.pi

    return diff


def get_difference_degrees(angle1, angle2):
    return math.degrees(get_difference_radians(angle1, angle2))


def get_distance_list(car, waypoints):
    dist_list = []
    min_dist = float("inf")
    min_idx = -1

    for i, waypoint in enumerate(waypoints):
        dist = get_distance(car, waypoint)
        if dist < min_dist:
            min_dist = dist
            min_idx = i
        dist_list.append(dist)

    return dist_list, min_dist, min_idx, len(waypoints)


######################################################################

def draw_ray(params, waypoints, sight=1.0):
    car = [params["x"], params["y"]]

    target_dist = params["track_width"] * sight

    dist_list, _, min_idx, length = get_distance_list(car, waypoints)

    target_idx = min_idx

    for i in range(5, int(length * 0.1)):
        index = (min_idx + i) % length
        target_idx = index
        if dist_list[index] >= target_dist:
            break

    return target_idx, min_idx
######################################################################

def score_steering(params, target):
    car = [params["x"], params["y"]]

    # target angle
    target_angle = get_radians(car, target)

    heading = params["heading"]
    steering = params["steering_angle"]

    # target steering
    target_steering = get_difference_degrees(target_angle, math.radians(heading))
    target_steering = max(-30, min(30, target_steering))

    # diff steering
    diff = abs(steering - target_steering)

    score = 1.1 - (diff / 60)

    return max(min(score, reward_max), reward_min)


def score_speed(params, target):
    speed = params["speed"]

    # diff speed
    diff = abs(speed - target[2])

    score = 1.1 - (diff / 3)

    return max(min(score, reward_max), reward_min)


def score_center(params, target):
    track_width = params["track_width"]

    car = [params["x"], params["y"]]

    center = [target[0], target[0]]

    dist = get_distance(car, center)

    # diff dist
    diff = abs(track_width - dist)

    score = 1.1 - (diff / track_width)

    return max(min(score, reward_max), reward_min)
    
    
def score_progress(params):
    
    global fast_progress
    
    progress = params["progress"]
    
    if fast_progress > progress:
        fast_progress = float(0)
        
    score = ((progress - fast_progress)*reward_max) 
    
    fast_progress = progress
    
    return max(score, reward_min)


def get_racing_track():
    return [
[1.17885, -0.02819, 2.5, 0.12038],
[0.97428, 0.19281, 2.5, 0.12046],
[0.77039, 0.41465, 2.5, 0.12052],
[0.56694, 0.63702, 2.5, 0.12056],
[0.36371, 0.85965, 2.5, 0.12058],
[0.16067, 1.08251, 2.5, 0.12059],
[-0.04223, 1.30555, 2.5, 0.12061],
[-0.24496, 1.5288, 2.5, 0.12062],
[-0.4475, 1.75228, 2.5, 0.12064],
[-0.64984, 1.97599, 2.5, 0.12066],
[-0.85192, 2.20003, 2.5, 0.12068],
[-1.05344, 2.42472, 2.5, 0.12073],
[-1.25411, 2.6504, 2.22318, 0.13584],
[-1.45594, 2.87373, 1.987, 0.15149],
[-1.66165, 3.09018, 1.80388, 0.16554],
[-1.87335, 3.29467, 1.5668, 0.18786],
[-2.09255, 3.48153, 1.39078, 0.2071],
[-2.31965, 3.64525, 1.23406, 0.22686],
[-2.55394, 3.78055, 1.09776, 0.24647],
[-2.79366, 3.8824, 1.09776, 0.23726],
[-3.03592, 3.94668, 1.09776, 0.22832],
[-3.27641, 3.96537, 1.09776, 0.21973],
[-3.50797, 3.93144, 1.09776, 0.2132],
[-3.71896, 3.83638, 1.09776, 0.2108],
[-3.88698, 3.67145, 1.21977, 0.19302],
[-4.0029, 3.46131, 1.35655, 0.17691],
[-4.06619, 3.23045, 1.47171, 0.16266],
[-4.08237, 2.99662, 1.61364, 0.14525],
[-4.06132, 2.76898, 1.74679, 0.13087],
[-4.01102, 2.55088, 1.89145, 0.11834],
[-3.93766, 2.34296, 1.55965, 0.14136],
[-3.84538, 2.14508, 1.26288, 0.17289],
[-3.73745, 1.95666, 1.26288, 0.17195],
[-3.61589, 1.77732, 1.26288, 0.17155],
[-3.46559, 1.58986, 1.26288, 0.19026],
[-3.3348, 1.39364, 1.26288, 0.18673],
[-3.24176, 1.18168, 1.26288, 0.1833],
[-3.20714, 0.94929, 1.45877, 0.16106],
[-3.22122, 0.70365, 1.73181, 0.14207],
[-3.27557, 0.44914, 2.10352, 0.12372],
[-3.36195, 0.1884, 2.5, 0.10987],
[-3.47031, -0.07663, 2.5, 0.11453],
[-3.59276, -0.35194, 2.5, 0.12053],
[-3.70757, -0.6305, 2.45447, 0.12275],
[-3.81255, -0.91281, 2.26315, 0.13309],
[-3.90467, -1.19896, 2.10558, 0.14277],
[-3.98055, -1.48823, 1.95433, 0.15302],
[-4.03675, -1.77896, 1.8058, 0.16398],
[-4.07006, -2.06871, 1.61297, 0.18082],
[-4.07796, -2.35438, 1.42626, 0.20037],
[-4.05785, -2.63218, 1.27572, 0.21833],
[-4.00829, -2.89786, 1.12799, 0.2396],
[-3.92841, -3.14667, 1.0, 0.26132],
[-3.81797, -3.37333, 1.0, 0.25213],
[-3.67586, -3.56992, 1.0, 0.24258],
[-3.50254, -3.72585, 1.0, 0.23314],
[-3.30246, -3.82919, 1.0, 0.22519],
[-3.0846, -3.8639, 1.0, 0.22061],
[-2.86921, -3.80985, 1.1893, 0.18672],
[-2.67215, -3.69283, 1.31765, 0.17394],
[-2.50144, -3.5234, 1.47389, 0.16319],
[-2.36194, -3.31176, 1.65465, 0.15319],
[-2.25566, -3.0676, 1.76875, 0.15055],
[-2.18244, -2.79938, 1.61197, 0.17248],
[-2.14008, -2.51429, 1.4814, 0.19456],
[-2.127, -2.22076, 1.30142, 0.22577],
[-2.08005, -1.94006, 1.17403, 0.24241],
[-1.99865, -1.67826, 1.04125, 0.2633],
[-1.88265, -1.44243, 1.04125, 0.2524],
[-1.73341, -1.24052, 1.04125, 0.24112],
[-1.55471, -1.08023, 1.04125, 0.23055],
[-1.35065, -0.97424, 1.04125, 0.22084],
[-1.13142, -0.93427, 1.04125, 0.21401],
[-0.91566, -0.97615, 1.16222, 0.18912],
[-0.71978, -1.08038, 1.27537, 0.17397],
[-0.55152, -1.2341, 1.38928, 0.16405],
[-0.41548, -1.42792, 1.52292, 0.15549],
[-0.31396, -1.65377, 1.69263, 0.14629],
[-0.2468, -1.90419, 1.5618, 0.16601],
[-0.21119, -2.17228, 1.25907, 0.2148],
[-0.2013, -2.45172, 1.05429, 0.26522],
[-0.21099, -2.73807, 1.05429, 0.27176],
[-0.23212, -3.0039, 1.05429, 0.25294],
[-0.22807, -3.25729, 1.05429, 0.24037],
[-0.18217, -3.48688, 1.05429, 0.22208],
[-0.08656, -3.68183, 1.05429, 0.20595],
[0.06315, -3.82604, 1.07185, 0.19393],
[0.25374, -3.91471, 1.19, 0.17665],
[0.47108, -3.94962, 1.30792, 0.1683],
[0.70518, -3.9303, 1.44545, 0.16251],
[0.9466, -3.85721, 1.5091, 0.16715],
[1.18401, -3.72675, 1.5792, 0.17154],
[1.43537, -3.64681, 1.54486, 0.17074],
[1.6916, -3.61315, 1.47565, 0.17513],
[1.9489, -3.62299, 1.37028, 0.18792],
[2.20403, -3.67601, 1.2804, 0.20351],
[2.45328, -3.77354, 1.202, 0.22267],
[2.69005, -3.92338, 1.02595, 0.27312],
[2.94411, -4.01746, 1.02595, 0.26407],
[3.19298, -4.05176, 1.02595, 0.24487],
[3.42603, -4.0289, 1.02595, 0.22824],
[3.63458, -3.95263, 1.02595, 0.21644],
[3.81, -3.82567, 1.02595, 0.21107],
[3.92786, -3.64044, 1.13441, 0.19354],
[3.98445, -3.41809, 1.27721, 0.17964],
[3.98138, -3.17723, 1.41599, 0.17011],
[3.92288, -2.9333, 1.5767, 0.1591],
[3.81718, -2.69741, 1.76607, 0.14637],
[3.67368, -2.47517, 2.00827, 0.13173],
[3.50131, -2.26778, 2.37831, 0.11339],
[3.30856, -2.07314, 2.5, 0.10957],
[3.10167, -1.88845, 2.5, 0.11093],
[2.88408, -1.71115, 2.5, 0.11227],
[2.65936, -1.51577, 2.5, 0.11911],
[2.43924, -1.31391, 2.5, 0.11947],
[2.22303, -1.10716, 2.5, 0.11966],
[2.01001, -0.89649, 2.5, 0.11984],
[1.79956, -0.68266, 2.5, 0.12001],
[1.59116, -0.46633, 2.5, 0.12015],
[1.38438, -0.24802, 2.5, 0.12028]]